#SingleInstance Force

+Esc:: ExitApp

try {
	s := "rabctk"
	MsgBox(s * 1 + 3) 
} catch {
	MsgBox("nan")
}

str := "12"
ab := StrSplit(str, [" ", "-"])
MsgBox(ab.Length)
Switch (ab.Length) {
	Case 0:
		a := 0
		b := 6
	Case 1:
		a := 0
		b := ab[1] * 1
	Case 2:
		a := ab[1] * 1
		b := ab[2] * 1
	Default:
		a := -1
		b := -1
}
MsgBox(a . "-" . b)

; MsgBox(A_AhkVersion)
; d := "20000229"
; i := IsDate(d)
; MsgBox(i)

; NumpadSub:: {
; 	SetKeyDelay(100, 100)
; 	Send("good soil in order to grow strong. Infertile soil will not bring forth splendid fruit.")
; }

; running := False
; d:: {
; 	Global running := False
; }
; a:: {
; 	Global running := True
; 	While (running) {
; 		MouseMove(288, 516)
; 		Loop 100 {
; 			MouseClick()
; 			If (Not running) {
; 				Return
; 			}
; 		}
; 		MouseMove(1633, 200)
; 		MouseClick()
; 		MouseMove(288, 516)
; 		Loop 50 {
; 			MouseClick()
; 			If (Not running) {
; 				Return
; 			}
; 		}
; 		n := 8
; 		a := 300
; 		; b := 500
; 		Loop n {
; 			; If (A_Index > 6) {
; 			; 	Break
; 			; }
; 			i := n - A_Index
; 			MouseMove(1717, a + i * 64)
; 			; MouseMove(1717, a + i * (b - a) / (n - 1))
; 			MouseClick()
; 		}
; 	}
; }
; ; 288, 516
; ; 1633, 292
; ; 1717, 955
; ; 1717, 402
; s:: {
; 	MouseGetPos(&x, &y)
; 	MsgBox(x ", " y)
; }


; #Include "./ezΩManager/UIAutomation/Lib/UIA.ahk"
; #Include "./ezΩManager/UIAutomation/Lib/UIA_Browser.ahk"


; l:: {
; 	title := WinGetTitle("A")
; 	MsgBox(title)
; 	; uiab := UIA_Chrome(title)
; 	; url := uiab.GetCurrentURL()
; 	; MsgBox(InStr(url, "chat.openai.com"))
; }

; a := ClipboardAll()

; FileOpen("C:/temp/a.html", "w").RawWrite(a.Ptr, a.Size)

; if (buildNumber >= 22000)
; 	hwndOSD = internalFind(bSilent, "XamlExplorerHostIslandWindow", "", "Windows.UI.Composition.DesktopWindowContentBridge", "DesktopWindowXamlSource"); 
; } else {
; 	hwndOSD = internalFind(bSilent, "NativeHWNDHost", "", "DirectUIHWND", "");
; }

; getRect(hwnd, *) {
; 	RECT := Buffer(16, 0)
; 	DllCall("user32\GetWindowRect", "uint", hwnd, "ptr", RECT)
; 	vWinX := NumGet(RECT, 0, "Int")
; 	vWinY := NumGet(RECT, 4, "Int")
; 	vWinR := NumGet(RECT, 8, "Int")
; 	vWinB := NumGet(RECT, 12, "Int")
; 	vWinW := vWinR - vWinX
; 	vWinH := vWinB - vWinY
; 	Return "(" vWinX ", " vWinY ") [" vWinW "×" vWinH "]"
; }
; showRect(hwnd, *) {
; 	MsgBox(getRect(hwnd))
; }
; ; cb := CallbackCreate(showRect)

; l:: {
; 	; hw_handle := DllCall( "FindWindowEx", "uint", 0        , "uint", 0, "str", "XamlExplorerHostIslandWindow", "uint", 0 )
; 	; MsgBox("" hw_handle)
; 	; hw_handle := DllCall( "FindWindowEx", "uint", hw_handle, "uint", 0, "str", "Windows.UI.Composition.DesktopWindowContentBridge", "str", "DesktopWindowXamlSource" )
; 	; MsgBox("" hw_handle)
; 	hw_handle  := DllCall( "FindWindowEx", "uint", 0        , "uint", 0, "str", "NativeHWNDHost", "uint", 0 )
; 	; MsgBox("" hw_handle)
; 	hw_handle1 := DllCall( "FindWindowEx", "uint", hw_handle, "uint", 0, "str", "DirectUIHWND", "uint", 0 )
; 	; hw_handle1 := DllCall( "FindWindowEx", "uint", hw_handle, "uint", 0, "str", "MediaTransportControls", "uint", 0 )
; 	; MsgBox("" hw_handle1)
	
; 	; MsgBox(hw_handle)
; 	;get window position
; 	r := DllCall("SetWindowPos", "uint", hw_handle, "uint", 0, "int", 1850, "int", 60, "int", 65, "int", 140, "uint", 0, "int")
; 	; r := DllCall( "SendMessage", "uint", hw_handle1, "int", 0x0010, "int", 0, "int", 0, "int" )
; 	; r := DllCall( "DestroyWindow", "uint", hw_handle1, "int" )
; 	MsgBox(hw_handle " " hw_handle1 " " r " " DllCall( "GetLastError", "int" ))
; 	; DllCall( "ShowWindow", "uint", hw_handle1, "uint", 6 )
; 	; w0r := getRect(hw_handle)
; 	; w1r := getRect(hw_handle1)
; 	; MsgBox(w0r "`n" w1r)
; 	DllCall( "ShowWindow", "uint", hw_handle, "uint", 9 )
; 	DllCall( "ShowWindow", "uint", hw_handle1, "uint", 9 )
	
	
	
; 	; DllCall( "EnumChildWindows", "uint", hw_handle1, "ptr", cb, "ptr", 0 )
; 	; MsgBox("cc")
	
; }
; ; f(A) {
; ; 	A.ap()
; ; }

; ; f(AAA)

; ExitApp

; SetTitleMatchMode(2)

; ?:: {
; 	; MsgBox "The active window is '" WinGetTitle("A") "'."
; 	TrayTip(
; 		"Left: " GetKeyState("Left") "`n"
; 		"Right: " GetKeyState("Right") "`n"
; 		"Up: " GetKeyState("Up") "`n"
; 		"Down: " GetKeyState("Down") "`n"
; 	, , 0x10)
; }

; selectRow(args*) {
; 	list_view.Modify(1, , "<" "name" ">")
	
; 	; row := list_view.GetNext()
; 	; If (row == 0) {
; 	; 	MsgBox("Nothing selected")
; 	; 	Return
; 	; }
; 	; name := list_view.GetText(row, 1)
; 	; MsgBox(name)
; }
; deleteRow(args*) {
; 	row := list_view.GetNext()
; 	If (row == 0) {
; 		MsgBox("Nothing selected")
; 		Return
; 	}
; 	list_view.Delete(row)
; }
; renameRow(list_view, row) {
; 	name := list_view.GetText(row, 1)
; 	; list_view.Modify(row, "Col1", ["<" name ">", "ˇnorm"])
; 	MsgBox("renamed " row " to " name)
; }
; showContent(list_view, row) {
; 	mytype := list_view.GetText(row, 2)
; 	a := MsgBox(row ": " mytype, , 0x21)
; 	MsgBox(a)
; }

; window := Gui()

; list_view := window.AddListView("-ReadOnly Sort", ["Name", "Type"])
; list_view.Add(, "aaa", "Normal")
; list_view.Add(, "696", "Rotating")
; list_view.Add(, "xyz", "Normal")
; list_view.Add(, "štoviše", "Stack")
; list_view.ModifyCol(1, "Auto")
; list_view.ModifyCol(2, "Auto")
; list_view.OnEvent("ItemEdit", renameRow)
; list_view.OnEvent("DoubleClick", showContent)

; select_button := window.AddButton(, "select")
; select_button.OnEvent("Click", selectRow)
; delete_button := window.AddButton("YP+0", "delete")
; delete_button.OnEvent("Click", deleteRow)

; window.Show()

; Ctrl:: {
; 	; SendEvent("{Media_Play_Pause}")
; 	; Send("{WheelDown}")
; 	; Sleep(10*1000)
; 	; MouseGetPos(&x, &y, &win, &ctrl)
; 	; MouseClick("Left", A_ScreenWidth / 2, A_ScreenHeight / 2, , 0)
; 	; Sleep(100)
; 	; MouseMove(x, y)
; 	; TrayTip("hello")
; }

; Media_Play_Pause:: {
; 	MsgBox("pp")
; }

; myabs(a, b) {
; }

; ; strCont(str) {
; ; 	loop parse str 
; ; }

; ; MsgBox(Type(myabs(78,88)))

; a := [111, 222, 333]

; MsgBox(a[1])

; ExitApp