#Requires AutoHotkey v2.0

#Include "./Types.ahk2"
#Include "./MatchGroup.ahk2"



; functions
	xMatcher(whole_text) {
		index := InStr(whole_text, "x", False)
		Return MatchResult(index != 0, index)
	}
	xReplacer(index, whole_text) {
		Return SubStr(whole_text, 1, index - 1) . "_XXX_" . SubStr(whole_text, index + 1)
	}
;
mainHelper() {
	MouseGetPos(&x, &y)
	Return ["General", [
		"CapsLock: " getOnOff(GetKeyState("CapsLock", "T")) "`tShift: " getOnOff(GetKeyState("Shift")),
		"NumLock: "  getOnOff(GetKeyState("NumLock" , "T")) "`tCtrl: "  getOnOff(GetKeyState("Ctrl")),
		"Mouse: (" x "," y ")`tAlt: " getOnOff(GetKeyState("Alt")),
	]]
}
helperReplacer(match, whole_text) {
	text := ""
	For helper In helpers {
		text .= "=============================`n"
		help_text := helper()
		text .= help_text[1] . "`n"
		For line In help_text[2] {
			text .= line . "`n"
		}
	}
	MsgBox(text)
	Return NO_REPLACEMENT_TEXT
}


helpers.Push(mainHelper)
; reseters.Push(mainReseter)
match_groups[Trim].exact_matches["?"] := helperReplacer

;
	; order of priority
	;     whole match
	;         exact
	;         case insensitive
	;         regex
	;     first word
	;         exact
	;         case insensitive
	;         regex
	;     any - in order of appearance
;


#Include "./Components/Box.ahk2"
#Include "./Components/ClipBoardManager.ahk2"
#Include "./Components/CyrillicLetterReplacers.ahk2"
#Include "./Components/DoubleLettersReplacers.ahk2"
#Include "./Components/ezΩ.ahk2"
#Include "./Components/Greek.ahk2"
#Include "./Components/PasswordManager.ahk2"
#Include "./Components/SubSuperScript.ahk2"
#Include "./Components/Hžpp.ahk2"
#Include "./Components/RNG.ahk2"

For comp In components {
	comp.init()
}