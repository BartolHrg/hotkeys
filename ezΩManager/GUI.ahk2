#Requires AutoHotkey v2.0
#SingleInstance Force

; ^Esc:: {
; 	MsgBox("Exiting Ez立Manager GUI")
; 	ExitApp
; }

#Include "./ReplacerAlgorithms.ahk2"
#Include "./Manager.ahk2"

TITLE := "Ez立Manager v" . version
Class Ez立Manager Extends ManagerBase {
	initialized := False
	__New() {
		managers.Push(This)
		This.replacement := NO_REPLACEMENT_TEXT
		This.gui_object := gui_object := Gui(, TITLE,)
		gui_object.OnEvent("Escape", (*) => This.destroy())
		gui_object.OnEvent("Close", (*) => This.cleanup())
		This.edit_object := gui_object.AddEdit("r1 w400")
		This.edit_object.OnEvent("Focus", (*) => This.onGetFocus())
		This.edit_object.OnEvent("LoseFocus", (*) => This.onLoseFocus())
		This.onGetFocus()
		This.initialized := True
		gui_object.Show()
	}
	
	onGetFocus() {
		For component In components {
			component.suspend()
		}
	}
	onLoseFocus() {
		For component In components {
			component.restore()
		}
	}
	
	submit() {
		text := This.edit_object.Value
		replacement := executeReplacer(text)
		If (replacement == MATCH_NOT_FOUND) {
			MsgBox("Match Not Found", TITLE . " Error", "iconx")
		} Else If (replacement == REPLACEMENT_ERROR) {
			MsgBox("Replacement Error", TITLE . " Error", "iconx")
		} Else If (replacement == NO_REPLACEMENT_TEXT) {
			This.cleanup()
			Return True
		} Else If (replacement Is String) {
			This.replacement := replacement
			This.cleanup()
			Return True
		} Else If (replacement Is Func) {
			This.replacement := replacement
			This.cleanup()
			Return True
		} Else {
			MsgBox("Unknown replacement", TITLE . " Error", "iconx")
		}
		Return False
	}
	destroy() {
		Super.destroy()
		This.gui_object.Destroy()
		Return True
	}
	cleanup() {
		This.gui_object.Destroy() ; even if it's redundant
		removeManager(This)
		This.makeReplacement()
		Super.cleanup()
	}

	makeReplacement() {
		replacement := This.replacement
		is_string := replacement Is String
		is_func := replacement Is Func
		If (is_string) {
			If (StrLen(replacement) > 0) {
				tmpclp := ClipboardAll()
				A_Clipboard := replacement
				Sleep(300)
				SendEvent("^v")
				Sleep(300)
				A_Clipboard := tmpclp
				tmpclp := ""
			}
		} Else If (is_func) {
			replacement()
		}
	}
	
	isActive(hwnd) {
		return This.gui_object.Hwnd == hwnd
	}
}

; Sleep(5000)
; manager := Ez立Manager()


#HotIf WinActive(TITLE)
	Tab:: {
		manager := getActiveManager()
		manager.submit()
	}
#HotIf
