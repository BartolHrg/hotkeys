#Requires AutoHotkey v2.0

#Include "../DefaultMap.ahk2"
#Include "../Types.ahk2"
#Include "../MatchGroup.ahk2"

class ezΩ extends Component {
	Static init() {
		For replacement In ezΩ.case_insensitive_replacements {
			match := replacement[1]
			replacement := replacement[2]
			match_groups[Trim].case_insensitive_matches[match] := replacement
		}
		For replacement In ezΩ.case_sensitive_replacements {
			match := replacement[1]
			replacement := replacement[2]
			match_groups[Trim].exact_matches[match] := replacement
		}
	}
	
	Static doubleReplacer(lower, upper) {
		Static double_length_p_1 := StrLen("double") + 1
		replacer(match, whole_text) {
			trimmed := match[1]
			If (IsUpper(SubStr(trimmed, 1, 1)) Or IsUpper(SubStr(trimmed, double_length_p_1, 1))) {
				Return upper
			} Else {
				Return lower
			}
		}
		Return replacer
	}
	
	Static bracketReplacer(opening, closing) {
		back_keys := StrRepeat("{Left}", StrLen(closing))
		bracketInserter() {
			SendText(opening . closing)
			Sleep(200)
			Send(back_keys)
		}
		replacer(match, whole_text) {
			Return bracketInserter
		}
		Return replacer
	}
	
	;#region replacements
		Static card_suites := [
			["herc"    , "♥"],
			["karo"    , "♦"],
			["pik"     , "♠"],
			["tref"    , "♣"],
			["hearts"  , "♥"],
			["diamonds", "♦"],
			["spades"  , "♠"],
			["clubs"   , "♣"],
		]
		Static arrows := [
			["<=>", "⇔"],
			["=>", "⇒"],
			["<=", "⇐"],
			
			["<->", "↔"],
			["->", "→"],
			["<-", "←"],
		]
		Static punctuation := [
			["...", "…"],
			["dagger", "†"],
		]
		Static O := [
			["/o", "ø"],
			["o/", "ø"],
			["/O", "Ø"],
			["O/", "Ø"],
		]
		Static diacritics := [
			["ae", "æ"],
			["Ae", "Æ"],
			["AE", "Æ"],
			
			["oe", "œ"],
			["Oe", "Œ"],
			["OE", "Œ"],
			
			["nj", "ǌ"],
			["Nj", "ǋ"],
			["NJ", "Ǌ"],
			
			["lj", "ǉ"],
			["Lj", "ǈ"],
			["LJ", "Ǉ"],
			
			["dž", "ǆ"],
			["Dž", "ǅ"],
			["DŽ", "Ǆ"],
			
			["dz", "ǳ"],
			["Dz", "ǲ"],
			["DZ", "Ǳ"],
		]
		Static double_replacements := [
			["doublepi"   , ezΩ.doubleReplacer("ℼ", "ℿ")],
			["doublegamma", ezΩ.doubleReplacer("ℽ", "ℾ")],
			["doublesigma", "⅀"],
			
			["doublea", ezΩ.doubleReplacer("𝕒", "𝔸")],
			["doubleb", ezΩ.doubleReplacer("𝕓", "𝔹")],
			["doublec", ezΩ.doubleReplacer("𝕔", "ℂ")],
			["doubled", ezΩ.doubleReplacer("𝕕", "𝔻")],
			["doublee", ezΩ.doubleReplacer("𝕖", "𝔼")],
			["doublef", ezΩ.doubleReplacer("𝕗", "𝔽")],
			["doubleg", ezΩ.doubleReplacer("𝕘", "𝔾")],
			["doubleh", ezΩ.doubleReplacer("𝕙", "ℍ")],
			["doublei", ezΩ.doubleReplacer("𝕚", "𝕀")],
			["doublej", ezΩ.doubleReplacer("𝕛", "𝕁")],
			["doublek", ezΩ.doubleReplacer("𝕜", "𝕂")],
			["doublel", ezΩ.doubleReplacer("𝕝", "𝕃")],
			["doublem", ezΩ.doubleReplacer("𝕞", "𝕄")],
			["doublen", ezΩ.doubleReplacer("𝕟", "ℕ")],
			["doubleo", ezΩ.doubleReplacer("𝕠", "𝕆")],
			["doublep", ezΩ.doubleReplacer("𝕡", "ℙ")],
			["doubleq", ezΩ.doubleReplacer("𝕢", "ℚ")],
			["doubler", ezΩ.doubleReplacer("𝕣", "ℝ")],
			["doubles", ezΩ.doubleReplacer("𝕤", "𝕊")],
			["doublet", ezΩ.doubleReplacer("𝕥", "𝕋")],
			["doubleu", ezΩ.doubleReplacer("𝕦", "𝕌")],
			["doublev", ezΩ.doubleReplacer("𝕧", "𝕍")],
			["doublew", ezΩ.doubleReplacer("𝕨", "𝕎")],
			["doublex", ezΩ.doubleReplacer("𝕩", "𝕏")],
			["doubley", ezΩ.doubleReplacer("𝕪", "𝕐")],
			["doublez", ezΩ.doubleReplacer("𝕫", "ℤ")],
			
			["double0", "𝟘"],
			["double1", "𝟙"],
			["double2", "𝟚"],
			["double3", "𝟛"],
			["double4", "𝟜"],
			["double5", "𝟝"],
			["double6", "𝟞"],
			["double7", "𝟟"],
			["double8", "𝟠"],
			["double9", "𝟡"],
		]
		Static hebrew := [
			["aleph", "ℵ"],
			["bet"  , "ℶ"],
			["gimel", "ℷ"],
			["dalet", "ℸ"],
		]
		Static math := [
			;#region compare
				["eq", "≡"],
				["equiv", "≡"],
				["equivalent", "≡"],
				["ne", "≠"],
				
				["le", "≤"],
				["ge", "≥"],
			;#endregion
			;#region logic
				["and"      , "∧"],
				["or"       , "∨"],
				["not"      , "¬"],
				
				["forall"   , "∀"],
				["all"      , "∀"],
				["notexists", "∄"],
				["nexists"  , "∄"],
				["exists"   , "∃"],
				["any"      , "∃"],
				["nany"     , "∃"],
			;#endregion
			;#region operators
				["+-", "±"],
				["-+", "∓"],
				["cdot", "·"],
				["*", "·"],
				["sqrt", "√"],
				["cbrt", "∛"],
				["qvrt", "∜"],
			;#endregion
			;#region set
				["notin", "∉"],
				["nin"  , "∉"],
				["in"   , "∈"],
				["cap"         , "∩"],
				["intersect"   , "∩"],
				["intersection", "∩"],
				["cup"         , "∪"],
				["union"       , "∪"],
				["emptyset", "⊘"],
			;#endregion
			;#region braces
				["ceil"  , ezΩ.bracketReplacer("⌈", "⌉")],
				["wide"  , ezΩ.bracketReplacer("⌈", "⌋")],
				["floor" , ezΩ.bracketReplacer("⌊", "⌋")],
				["trunc" , ezΩ.bracketReplacer("⌈", "⌋")],
				["braket", ezΩ.bracketReplacer("⟨", "⟩")],
				["ceil(" , "⌈"],
				["ceil)" , "⌉"],
				["wide(" , "⌊"],
				["wide)" , "⌉"],
				["floor(", "⌊"],
				["floor)", "⌋"],
				["trunc(", "⌈"],
				["trunc)", "⌋"],
				["bra", "⟨"],
				["ket", "⟩"],
			;#endregion
			["infinity", "∞"],
			["inf", "∞"],
			["i", "𝕚"],
			["j", "𝕛"],
		
			["angle", "∠"],
			["int", "∫"],
			["pardif", "∂"],
			["sum", "Σ"],
			
			["fax", "℻"],
			["qed", "∎"],
			; ℳℱ ℭ ℻ 
		]
	;#endregion
	
	Static case_sensitive_replacements := joinSpread(
		ezΩ.O,
		ezΩ.diacritics,
	)
	Static case_insensitive_replacements := joinSpread(
		[
			["ez" , "ezΩ"],
			["ezm", "ezΩManager"],
			["kika", "‬"],
			["r", "Ⓡ"],
			["c", "©"],
			["tm", "™"],
		],
		ezΩ.card_suites,
		ezΩ.arrows,
		ezΩ.punctuation,
		ezΩ.double_replacements,
		ezΩ.hebrew,
		ezΩ.math,
	)
}
components.Push(ezΩ)


#Hotstring EndChars `t
#Hotstring O?


; arrows
	:O:<=>::⇔
	:O:=>::⇒
	:O:<=::⇐
	
	:O:<->::↔
	:O:->::→
	:O:<-::←
; end

; punctuation
	::...::…
; end

; letters
	<^>!r:: SendText("Ⓡ")
	<^>!c:: SendText("©")
; end

; math & logic
	; operators
		:O:+-::±
		:O:-+::∓
	; end
; end
	
;