#Requires AutoHotkey v2.0

#Include "../Types.ahk2"
#Include "../MatchGroup.ahk2"

class sub_sup extends Component {
	Static init() {
		match_groups[Trim].case_insensitive_matches["subsup"] := sub_sup.getToggleMode(sub_sup.Modes.BOTH)
		match_groups[Trim].case_insensitive_matches["supsub"] := sub_sup.getToggleMode(sub_sup.Modes.BOTH)
		match_groups[Trim].case_insensitive_matches["sub"]    := sub_sup.getToggleMode(sub_sup.Modes.SUB)
		match_groups[Trim].case_insensitive_matches["sup"]    := sub_sup.getToggleMode(sub_sup.Modes.SUP)
		match_groups[firstWordTextTransform].case_insensitive_matches["subsup"] := bindTrash(sub_sup.parser)
		match_groups[firstWordTextTransform].case_insensitive_matches["supsub"] := bindTrash(sub_sup.parser)
		match_groups[firstWordTextTransform].case_insensitive_matches["sub"] := sub_sup.getParser(sub_sup.sub_replacements)
		match_groups[firstWordTextTransform].case_insensitive_matches["sup"] := sub_sup.getParser(sub_sup.sup_replacements)
	}
	class Modes {
		Static NONE := 0 ; 0b00
		Static SUB  := 1 ; 0b01
		Static SUP  := 2 ; 0b10
		Static BOTH := 3 ; 0b11
	}
	Static mode := sub_sup.Modes.NONE
	Static saved_mode := sub_sup.Modes.NONE
	Static suspend() {
		If (sub_sup.mode) {
			sub_sup.saved_mode := sub_sup.mode
			sub_sup.mode := 0
		}
	}
	Static restore() {
		If (sub_sup.saved_mode) {
			sub_sup.mode := sub_sup.saved_mode
			sub_sup.saved_mode := 0
		}
	}
	Static getToggleMode(mode) {
		toggleMode(*) {
			If (sub_sup.saved_mode == mode) {
				sub_sup.saved_mode := sub_sup.Modes.NONE
			} Else {
				sub_sup.saved_mode := mode
			}
			Return NO_REPLACEMENT_TEXT
		}
		Return toggleMode
	}
	Static _getMapOrDefault(replacements, key) {
		If (replacements.Has(key)) {
			Return replacements[key]
		} Else {
			Return key
		}
	}
	Static parser(match, whole_text) {
		starting_index := match[2] + 1
		result := ""
		NORMAL_STATE := 0
		ESCAPE_STATE := 1
		SUP_STATE    := 2
		SUB_STATE    := 3
		state := NORMAL_STATE
		For index In Count(starting_index, StrLen(whole_text)) {
			c := SubStr(whole_text, index, 1)
			Switch (state) {
			Case NORMAL_STATE:
				Switch (c) {
					Case "\": state := ESCAPE_STATE
					Case "+": state := SUP_STATE
					Case "-": state := SUB_STATE
					Default: result .= c
				}
			Case ESCAPE_STATE:
				result .= c
				state := NORMAL_STATE
			Case SUB_STATE:
				result .= sub_sup._getMapOrDefault(sub_sup.sub_replacements, c)
				state := NORMAL_STATE
			Case SUP_STATE:
				result .= sub_sup._getMapOrDefault(sub_sup.sup_replacements, c)
				state := NORMAL_STATE
			}
		}
		Return result
	}
	Static sub_replacements := Map(
		"0", "‚ÇÄ",
		"1", "‚ÇÅ",
		"2", "‚ÇÇ",
		"3", "‚ÇÉ",
		"4", "‚ÇÑ",
		"5", "‚ÇÖ",
		"6", "‚ÇÜ",
		"7", "‚Çá",
		"8", "‚Çà",
		"9", "‚Çâ",
		"+", "‚Çä",
		"-", "‚Çã",
		"=", "‚Çå",
		"(", "‚Çç",
		")", "‚Çé",
		"a", "‚Çê",
		"e", "‚Çë",
		"h", "‚Çï",
		"i", "·µ¢",
		"j", "‚±º",
		"k", "‚Çñ",
		"l", "‚Çó",
		"m", "‚Çò",
		"n", "‚Çô",
		"o", "‚Çí",
		"p", "‚Çö",
		"r", "·µ£",
		"s", "‚Çõ",
		"t", "‚Çú",
		"u", "·µ§",
		"v", "·µ•",
		"x", "‚Çì",
	)
	Static sup_replacements := Map(
		"0", "‚Å∞",
		"1", "¬π",
		"2", "¬≤",
		"3", "¬≥",
		"4", "‚Å¥",
		"5", "‚Åµ",
		"6", "‚Å∂",
		"7", "‚Å∑",
		"8", "‚Å∏",
		"9", "‚Åπ",
		"+", "‚Å∫",
		"-", "‚Åª",
		"=", "‚Åº",
		"(", "‚ÅΩ",
		")", "‚Åæ",
		"a", "·µÉ",
		"b", "·µá",
		"c", "·∂ú",
		"d", "·µà",
		"e", "·µâ",
		"f", "·∂†",
		"g", "·µç",
		"h", " ∞",
		"i", "‚Å±",
		"j", " ≤",
		"k", "·µè",
		"l", "À°",
		"m", "·µê",
		"n", "‚Åø",
		"o", "·µí",
		"p", "·µñ",
		"q", "êû•",
		"r", " ≥",
		"s", "À¢",
		"t", "·µó",
		"u", "·µò",
		"v", "·µõ",
		"w", " ∑",
		"x", "À£",
		"y", " ∏",
		"z", "·∂ª",
	)
	Static getParser(replacements) {
		parser(match, whole_text) {
			starting_index := match[2] + 1
			result := ""
			NORMAL_STATE := 0
			ESCAPE_STATE := 1
			state := NORMAL_STATE
			For index In Count(starting_index, StrLen(whole_text)) {
				c := SubStr(whole_text, index, 1)
				If (state == ESCAPE_STATE) {
					result .= c
					state := NORMAL_STATE
				} Else If (replacements.Has(c)) {
					result .= replacements[c]
				} Else If (c == "\") {
					state := ESCAPE_STATE
				} Else {
					result .= c
				}
			}
			Return result
		}
		Return parser
	}
}
components.Push(sub_sup)



;#region hotkeys
	#HotIf sub_sup.mode == sub_sup.Modes.BOTH
		 !0::
		 !Numpad0:: SendInput("‚Å∞")
		^!0::
		^!Numpad0:: SendInput("‚ÇÄ")
		 !1::
		 !Numpad1:: SendInput("¬π")
		^!1::
		^!Numpad1:: SendInput("‚ÇÅ")
		 !2::
		 !Numpad2:: SendInput("¬≤")
		^!2::
		^!Numpad2:: SendInput("‚ÇÇ")
		 !3::
		 !Numpad3:: SendInput("¬≥")
		^!3::
		^!Numpad3:: SendInput("‚ÇÉ")
		 !4::
		 !Numpad4:: SendInput("‚Å¥")
		^!4::
		^!Numpad4:: SendInput("‚ÇÑ")
		 !5::
		 !Numpad5:: SendInput("‚Åµ")
		^!5::
		^!Numpad5:: SendInput("‚ÇÖ")
		 !6::
		 !Numpad6:: SendInput("‚Å∂")
		^!6::
		^!Numpad6:: SendInput("‚ÇÜ")
		 !7::
		 !Numpad7:: SendInput("‚Å∑")
		^!7::
		^!Numpad7:: SendInput("‚Çá")
		 !8::
		 !Numpad8:: SendInput("‚Å∏")
		^!8::
		^!Numpad8:: SendInput("‚Çà")
		 !9::
		 !Numpad9:: SendInput("‚Åπ")
		^!9::
		^!Numpad9:: SendInput("‚Çâ")
		
		 !+:: SendInput("‚Å∫")
		 !NumpadAdd:: SendInput("‚Å∫")
		^!+:: SendInput("‚Çä")
		^!NumpadAdd:: SendInput("‚Çä")
		 !-:: SendInput("‚Åª")
		 !NumpadSub:: SendInput("‚Åª")
		^!-:: SendInput("‚Çã")
		^!NumpadSub:: SendInput("‚Çã")
		
		 !=:: SendInput("‚Åº")
		^!=:: SendInput("‚Çå")
		 !(:: SendInput("‚ÅΩ")
		^!(:: SendInput("‚Çç")
		 !):: SendInput("‚Åæ")
		^!):: SendInput("‚Çé")
		
		^!a:: SendInput("‚Çê")
		^!e:: SendInput("‚Çë")
		^!h:: SendInput("‚Çï")
		^!i:: SendInput("·µ¢")
		^!j:: SendInput("‚±º")
		^!k:: SendInput("‚Çñ")
		^!l:: SendInput("‚Çó")
		^!m:: SendInput("‚Çò")
		^!n:: SendInput("‚Çô")
		^!o:: SendInput("‚Çí")
		^!p:: SendInput("‚Çö")
		^!r:: SendInput("·µ£")
		^!s:: SendInput("‚Çõ")
		^!t:: SendInput("‚Çú")
		^!u:: SendInput("·µ§")
		^!v:: SendInput("·µ•")
		^!x:: SendInput("‚Çì")
		
		; there are also ·¥¨·¥ÆÍü≤·¥∞·¥±Íü≥·¥≥·¥¥·¥µ·¥∂·¥∑·¥∏·¥π·¥∫·¥º·¥æÍü¥·¥ø·µÄ·µÅ‚±Ω·µÇ, but I won't bother
		 !a:: SendInput("·µÉ")
		 !b:: SendInput("·µá")
		 !c:: SendInput("·∂ú")
		 !d:: SendInput("·µà")
		 !e:: SendInput("·µâ")
		 !f:: SendInput("·∂†")
		 !g:: SendInput("·µç")
		 !h:: SendInput(" ∞")
		 !i:: SendInput("‚Å±")
		 !j:: SendInput(" ≤")
		 !k:: SendInput("·µè")
		 !l:: SendInput("À°")
		 !m:: SendInput("·µê")
		 !n:: SendInput("‚Åø")
		 !o:: SendInput("·µí")
		 !p:: SendInput("·µñ")
		 !q:: SendInput("êû•")
		 !r:: SendInput(" ≥")
		 !s:: SendInput("À¢")
		 !t:: SendInput("·µó")
		 !u:: SendInput("·µò")
		 !v:: SendInput("·µõ")
		 !w:: SendInput(" ∑")
		 !x:: SendInput("À£")
		 !y:: SendInput(" ∏")
		 !z:: SendInput("·∂ª") 
	#HotIf sub_sup.mode == sub_sup.Modes.SUB
		0::
		Numpad0:: SendInput("‚ÇÄ")
		1::
		Numpad1:: SendInput("‚ÇÅ")
		2::
		Numpad2:: SendInput("‚ÇÇ")
		3::
		Numpad3:: SendInput("‚ÇÉ")
		4::
		Numpad4:: SendInput("‚ÇÑ")
		5::
		Numpad5:: SendInput("‚ÇÖ")
		6::
		Numpad6:: SendInput("‚ÇÜ")
		7::
		Numpad7:: SendInput("‚Çá")
		8::
		Numpad8:: SendInput("‚Çà")
		9::
		Numpad9:: SendInput("‚Çâ")
		
		+:: SendInput("‚Çä")
		NumpadAdd:: SendInput("‚Çä")
		-:: SendInput("‚Çã")
		NumpadSub:: SendInput("‚Çã")
		
		=:: SendInput("‚Çå")
		(:: SendInput("‚Çç")
		):: SendInput("‚Çé")
		
		a:: SendInput("‚Çê")
		e:: SendInput("‚Çë")
		h:: SendInput("‚Çï")
		i:: SendInput("·µ¢")
		j:: SendInput("‚±º")
		k:: SendInput("‚Çñ")
		l:: SendInput("‚Çó")
		m:: SendInput("‚Çò")
		n:: SendInput("‚Çô")
		o:: SendInput("‚Çí")
		p:: SendInput("‚Çö")
		r:: SendInput("·µ£")
		s:: SendInput("‚Çõ")
		t:: SendInput("‚Çú")
		u:: SendInput("·µ§")
		v:: SendInput("·µ•")
		x:: SendInput("‚Çì")
	#HotIf sub_sup.mode == sub_sup.Modes.SUP
		0::
		Numpad0:: SendInput("‚Å∞")
		1::
		Numpad1:: SendInput("¬π")
		2::
		Numpad2:: SendInput("¬≤")
		3::
		Numpad3:: SendInput("¬≥")
		4::
		Numpad4:: SendInput("‚Å¥")
		5::
		Numpad5:: SendInput("‚Åµ")
		6::
		Numpad6:: SendInput("‚Å∂")
		7::
		Numpad7:: SendInput("‚Å∑")
		8::
		Numpad8:: SendInput("‚Å∏")
		9::
		Numpad9:: SendInput("‚Åπ")
		
		+:: SendInput("‚Å∫")
		NumpadAdd:: SendInput("‚Å∫")
		-:: SendInput("‚Åª")
		NumpadSub:: SendInput("‚Åª")
		
		=:: SendInput("‚Åº")
		(:: SendInput("‚ÅΩ")
		):: SendInput("‚Åæ")
		
		; there are also ·¥¨·¥ÆÍü≤·¥∞·¥±Íü≥·¥≥·¥¥·¥µ·¥∂·¥∑·¥∏·¥π·¥∫·¥º·¥æÍü¥·¥ø·µÄ·µÅ‚±Ω·µÇ, but I won't bother
		a:: SendInput("·µÉ")
		b:: SendInput("·µá")
		c:: SendInput("·∂ú")
		d:: SendInput("·µà")
		e:: SendInput("·µâ")
		f:: SendInput("·∂†")
		g:: SendInput("·µç")
		h:: SendInput(" ∞")
		i:: SendInput("‚Å±")
		j:: SendInput(" ≤")
		k:: SendInput("·µè")
		l:: SendInput("À°")
		m:: SendInput("·µê")
		n:: SendInput("‚Åø")
		o:: SendInput("·µí")
		p:: SendInput("·µñ")
		q:: SendInput("êû•")
		r:: SendInput(" ≥")
		s:: SendInput("À¢")
		t:: SendInput("·µó")
		u:: SendInput("·µò")
		v:: SendInput("·µõ")
		w:: SendInput(" ∑")
		x:: SendInput("À£")
		y:: SendInput(" ∏")
		z:: SendInput("·∂ª") 
	#HotIf
;#endregion

