#Requires AutoHotkey v2.0

#Include "../Types.ahk2"
#Include "../MatchGroup.ahk2"

class clipboard_manager extends Component {
	Static init() {
		managers := [
			[clipboard_manager  .normal_clipboard, "cpn"],
			[clipboard_manager   .stack_clipboard, "cps"],
			[clipboard_manager   .queue_clipboard, "cpq"],
			[clipboard_manager.rotating_clipboard, "cpr"],
			[clipboard_manager    .dual_clipboard, "cp2"],
		]
		For manager_data In managers {
			manager := manager_data[1]
			match := manager_data[2]
			match_groups[Trim].case_insensitive_matches[match "" ] := clipboard_manager.getSetInstance(manager)
			match_groups[Trim].case_insensitive_matches[match "+"] := clipboard_manager.getSetInstance(manager, True)
			match_groups[Trim].case_insensitive_matches[match "-"] := clipboard_manager.getSetInstance(manager, False)
		}
		match_groups[firstWordTextTransform].case_insensitive_matches["cp+" ] := bindTrash(clipboard_storage  .saveClipboard)
		match_groups[firstWordTextTransform].case_insensitive_matches["cp-" ] := bindTrash(clipboard_storage  .loadClipboard)
		match_groups[firstWordTextTransform].case_insensitive_matches["cpx" ] := bindTrash(clipboard_storage.removeClipboard)
		match_groups[firstWordTextTransform].case_insensitive_matches["cpl" ] := bindTrash(clipboard_storage .listClipboards)
	}
	
	Static setClipboard(value) {
		A_Clipboard := ""
		Sleep(100)
		A_Clipboard := value
		ClipWait(1)
		Return True
	}
	Static mode := False
	Static use_ctrl_shift_c := False
	Static use_ctrl_shift_v := False
	Static title := "ezÎ©Manager - Clipboard Manager"
	
	Static   normal_clipboard :=   NormalClipboard()
	Static    stack_clipboard :=    StackClipboard()
	Static    queue_clipboard :=    QueueClipboard()
	Static rotating_clipboard := RotatingClipboard()
	Static     dual_clipboard :=     DualClipboard()
	Static manager := clipboard_manager.normal_clipboard
 
	Static getSetInstance(instance, should_reset := True) {
		setInstance(match_data, whole_text) {
			clipboard_manager.manager.stopUsing()
			clipboard_manager.manager := instance
			If (should_reset) {
				instance.reset()
			}
			clipboard_manager.manager.startUsing(match_data, whole_text)
		}
		Return setInstance
	}
}
components.Push(clipboard_manager)



class ClipboardManager {
	reset() => ""
	startUsing(match_data, whole_text) => ""
	setContent() => ""
	setContent2() => ""
	getContent() => True
	getContent2() => True
	stopUsing() => ""
	save() => ""
	load(content) => ""
}

class NormalClipboard extends ClipboardManager {
	content := ""
	reset() => A_Clipboard := This.content := ""
	startUsing(match_data, whole_text) {
		clipboard_manager.mode := False
		A_Clipboard := This.content
	}
	stopUsing() {
		clipboard_manager.mode := True
		This.content := ClipboardAll()
	}
	save() => ClipboardAll()
	load(content) => A_Clipboard := This.content := content
}
class _ListClipboard extends ClipboardManager {
	list := []
	reset() => This.list := []
	startUsing(match_data, whole_text) {
		clipboard_manager.use_ctrl_shift_v := True
		clipboard_manager.use_ctrl_shift_c := True
	}
	stopUsing() {
		clipboard_manager.use_ctrl_shift_v := False
		clipboard_manager.use_ctrl_shift_c := False
	}
	setContent() {
		This.addItem(ClipboardAll())
	}
	getContent() {
		If (This.list.Length == 0) {
			MsgBox("Empty clipboard", clipboard_manager.title, 0x10)
			Return False
		}
		clipboard_manager.setClipboard(This.getItem())
		Return True
	}
	setContent2() {
		If (This.list.Length == 0) {
			MsgBox("Empty clipboard", clipboard_manager.title, 0x10)
			Return False
		}
		This.removeItem()
	}
	getContent2() {
		If (This.list.Length == 0) {
			MsgBox("Empty clipboard", clipboard_manager.title, 0x10)
			Return False
		}
		This.skipItem()
	}
	save() => This.list.Clone()
	load(content) => This.list := content.Clone()
}
class StackClipboard extends _ListClipboard {
	addItem(item) => This.list.Push(item)
	getItem()     => This.list.Pop()
	removeItem()  => This.list.Pop()
	skipItem()    => This.list.Pop()
}
class QueueClipboard extends _ListClipboard {
	addItem(item) => This.list.InsertAt(1, item)
	getItem()     => This.list.Pop()
	removeItem()  => This.list.RemoveAt(1)
	skipItem()    => This.list.Pop()
}
class RotatingClipboard extends _ListClipboard {
	_index := 1
	index {
		set {
			If (Value > This.list.Length) {
				Value := 1
			}
			This._index := Value
		}
		get => This._index
	}
	reset() {
		Super.reset()
		This.index := 1
	}
	addItem(item) {
		This.list.InsertAt(This.index, item)
		This.index += 1
	}
	getItem() {
		item := This.list[This.index]
		This.index += 1
		Return item
	}
	removeItem() {
		This.list.RemoveAt(This.index)
		This.index := This.index
	}
	skipItem() => This.index += 1
}
class DualClipboard extends ClipboardManager {
	list := ["", ""]
	reset() => This.list[1] := This.list[2] := ""
	startUsing(match_data, whole_text) {
		clipboard_manager.use_ctrl_shift_v := True
		clipboard_manager.use_ctrl_shift_c := True
	}
	stopUsing() {
		clipboard_manager.use_ctrl_shift_v := False
		clipboard_manager.use_ctrl_shift_c := False
	}
	setContent() => This.list[1] := ClipboardAll()
	getContent() => clipboard_manager.setClipboard(This.list[1])
	setContent2() {
		If (A_ThisHotkey == "$^+c") {
			SendInput("^c")
		} Else {
			SendInput("^x")
		}
		Sleep(200)
		This.list[2] := ClipboardAll()
	}
	getContent2() {
		clipboard_manager.setClipboard(This.list[2])
		SendInput("^v")
	}
	save() => This.list.Clone()
	load(content) => This.list := content.Clone()
}


class clipboard_storage {
	Static title := "saved clipboards - " clipboard_manager.title
	Static saved := Map()
	
	Static _getStorageName(match_data, whole_text, description) {
		index_after_match := match_data[2]
		name := Trim(SubStr(whole_text, index_after_match + 1))
		If (Not name) {
			MsgBox("Provide name to " . description, clipboard_storage.title, 0x10)
			Return ""
		}
		Return name
	}
	Static saveClipboard(match_data, whole_text) {
		name := clipboard_storage._getStorageName(match_data, whole_text, "save")
		If (Not name) {
			Return
		}
		content := clipboard_manager.manager.save()
		clipboard_storage.saved[name] := [clipboard_manager.manager, content]
	}
	Static loadClipboard(match_data, whole_text) {
		name := clipboard_storage._getStorageName(match_data, whole_text, "load")
		Return clipboard_storage._loadClipboard(name)
	}
	Static _loadClipboard(name) {
		If (Not name) {
			Return
		}
		If (Not clipboard_storage.saved.Has(name)) {
			MsgBox("Name <" name "> not in saved names", clipboard_storage.title, 0x10)
			Return
		}
		instance_content := clipboard_storage.saved[name]
		clipboard_manager.manager.stopUsing()
		clipboard_manager.manager := instance_content[1]
		clipboard_manager.manager.load(instance_content[2])
	}
	Static removeClipboard(match_data, whole_text) {
		name := clipboard_storage._getStorageName(match_data, whole_text, "load")
		clipboard_storage._removeClipboard(name)
	}
	Static _removeClipboard(name) {
		If (Not name) {
			Return
		}
		If (Not clipboard_storage.saved.Has(name)) {
			MsgBox("Name <" name "> not in saved names", clipboard_storage.title, 0x10)
			Return
		}
		clipboard_storage.saved.Delete(name)
	}
	
	Static window := ""
	Static list_view := ""
	Static row_map := []
	Static renameRow(list_view, row) {
		new_name := list_view.GetText(row, 1)
		old_name := clipboard_storage.row_map[row]
		If (Not new_name) {
			MsgBox("Name can't be empty", clipboard_storage.title, 0x10)
			list_view.Modify(row, , old_name)
			Return
		}
		clipboard_storage.saved[new_name] := clipboard_storage.saved[old_name]
		clipboard_storage.row_map[row] := new_name
		clipboard_storage.saved.Delete(old_name)
		list_view.ModifyCol(1, "Auto")
	}
	Static showContent(list_view, row) {
		name := list_view.GetText(row, 1)
		data := clipboard_storage.saved[name]
		manager := data[1]
		contents := data[2]
		; hacky solution:
		; write as html, pray to god Chrome can open it, hope that title is read
		; or alternatively save without title in .clp file and open it however you can
		path := A_ScriptDir "/clipboard-view.html" 
		f := FileOpen(path, "w")
		f.Write("<title>" "Contents of <" name "> - " Type(manager) "</title>")
		f.RawWrite(contents.Ptr, contents.Size)
		f.Close()
		Run(path)
	}
	Static cleanupWindow(*) {
		TrayTip("cleanup")
		window := clipboard_storage.window
		clipboard_storage.window := "" ; stop recursion
		clipboard_storage.list_view := ""
		If (window Is Gui) {
			window.Destroy()
		}
	}
	Static selectRow(*) {
		row := clipboard_storage.list_view.GetNext()
		If (row == 0) {
			MsgBox("Nothing selected", clipboard_storage.title)
			Return
		}
		name := clipboard_storage.list_view.GetText(row, 1)
		If (MsgBox("Are you sure you want to select " name, clipboard_storage.title, 0x21) != "OK") {
			Return
		}
		clipboard_storage.cleanupWindow()
		clipboard_storage._loadClipboard(name)
	}
	Static deleteRow(*) {
		row := clipboard_storage.list_view.GetNext()
		If (row == 0) {
			MsgBox("Nothing selected", clipboard_storage.title)
			Return
		}
		name := clipboard_storage.list_view.GetText(row, 1)
		If (MsgBox("Are you sure you want to delete " name, clipboard_storage.title, 0x21) != "OK") {
			Return
		}
		clipboard_storage._removeClipboard(name)
		clipboard_storage.list_view.Delete(row)
		clipboard_storage.row_map.RemoveAt(row)
		clipboard_storage.list_view.ModifyCol(1, "Auto")
		clipboard_storage.list_view.ModifyCol(2, "Auto")
	}
	Static refreshListView(*) {
		clipboard_storage.row_map := []
		clipboard_storage.list_view.Delete()
		For name, clipboard In clipboard_storage.saved {
			manager := clipboard[1]
			contents := clipboard[2]
			; MsgBox(name " - " Type(manager))
			clipboard_storage.list_view.Add(, name, Type(manager), "No preview atm")
			clipboard_storage.row_map.Push(name)
		}
		clipboard_storage.list_view.ModifyCol(1, "Auto")
		clipboard_storage.list_view.ModifyCol(2, "Auto")
	}
	Static listClipboardsWindow() {
		If (clipboard_storage.window Is Gui) {
			clipboard_storage.refreshListView()
			ControlFocus(clipboard_storage.window)
			Return
		}
		clipboard_storage.window := Gui("Resize MinSize300x30", clipboard_storage.title " - main window")
		clipboard_storage.window.OnEvent("Escape", bindTrash(clipboard_storage.cleanupWindow))
		clipboard_storage.window.OnEvent("Close" , bindTrash(clipboard_storage.cleanupWindow))
		clipboard_storage.list_view := clipboard_storage.window.AddListView(
			"Count" clipboard_storage.saved.Count " "
			"-Multi "
			"-ReadOnly "
			"WantF2 "
		, ["Name", "Type", "Preview"])
		clipboard_storage.list_view.OnEvent("ItemEdit",    bindTrash(clipboard_storage.renameRow))
		clipboard_storage.list_view.OnEvent("DoubleClick", bindTrash(clipboard_storage.showContent))
		
		clipboard_storage.refreshListView()
		
		select_button := clipboard_storage.window.AddButton(, "Select")
		select_button.OnEvent("Click", bindTrash(clipboard_storage.selectRow))
		delete_button := clipboard_storage.window.AddButton("YP+0", "Delete")
		delete_button.OnEvent("Click", bindTrash(clipboard_storage.deleteRow))
		refresh_button := clipboard_storage.window.AddButton("YP+0", "Refresh")
		refresh_button.OnEvent("Click", bindTrash(clipboard_storage.refreshListView))
		
		clipboard_storage.window.Show()
		clipboard_storage.window.Opt("-Resize")
		clipboard_storage.window.Show()
	}
	
	Static listClipboards(match_data, whole_text) {
		Return bindTrash(clipboard_storage.listClipboardsWindow)
	}
}

#HotIf WinActive(clipboard_storage.title " - main window")
	Enter:: {
		clipboard_storage.selectRow()
	}
	Delete:: {
		clipboard_storage.deleteRow()
	}
	^r:: {
		clipboard_storage.refreshListView()
	}
#HotIf


#HotIf clipboard_manager.mode
	$^c:: {
		SendInput("^c")
		Sleep(200)
		clipboard_manager.manager.setContent()
	}
	$^x:: {
		SendInput("^x")
		Sleep(200)
		clipboard_manager.manager.setContent()
	}
	$^v:: {
		If (Not clipboard_manager.manager.getContent()) {
			Return
		}
		SendInput("^v")
	}
#HotIf clipboard_manager.use_ctrl_shift_c
	$^+c:: {
		clipboard_manager.manager.setContent2()
	}
	$^+x:: {
		clipboard_manager.manager.setContent2()
	}
#HotIf clipboard_manager.use_ctrl_shift_c
	$^+v:: {
		clipboard_manager.manager.getContent2()
	}
#HotIf

